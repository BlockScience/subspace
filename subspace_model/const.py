from subspace_model.units import *
# import pytest as pt

U32_RANGE = 2**32
U128_RANGE = 2**128
MIB_IN_BYTES = 1_048_576
PB_IN_BYTES = 1_125_899_906_842_624
DAY_TO_SECONDS = 24 * 60 * 60

# Subspace Constants
MAX_CREDIT_ISSUANCE: Credits = 1_000_000_000
ISSUED_AT_LAUNCH: Credits = MAX_CREDIT_ISSUANCE * 0.2915
ISSUANCE_FOR_FARMERS: Credits = MAX_CREDIT_ISSUANCE * 0.3782
KZG_COMMITMENT: Bytes = 32  # As per Subnomicon
WITNESS: Bytes = 48  # As per Subnomicon
CHUNK_SIZE: Bytes = 48  # As per Subnomicon
ARCHIVAL_DEPTH: Blocks = 100  # As per Subnomicon
BLOCK_TIME: Seconds = 6  # As per Subnomicon. Approximate value.
RAW_RECORD_IN_CHUNKS: Chunk = 2**15  # As per Subnomicon
PIECE_SIZE: Bytes = (
    RAW_RECORD_IN_CHUNKS * CHUNK_SIZE + KZG_COMMITMENT + WITNESS
)  # As per Subnomicon
SECTOR_IN_PIECES: Piece = 1_000  # As per Subnomicon
SECTOR_SIZE = SECTOR_IN_PIECES * PIECE_SIZE  # ~= 1 MiB
SEGMENT_SIZE: Bytes = 128 * MIB_IN_BYTES  # As per discussions
SEGMENT_HISTORY_SIZE: Bytes = SEGMENT_SIZE * 2  # As per discussions
SHANNON_IN_CREDITS: Credits = 1e-18

# Weight References
WEIGHT_REF_TIME_PER_SECOND: Picoseconds = 10e12
WEIGHT_REF_TIME_PER_MILLI: Picoseconds = 10e6
WEIGHT_REF_TIME_PER_MICRO: Picoseconds = 10e3
WEIGHT_REF_TIME_PER_NANO: Picoseconds = 10
BLOCK_WEIGHT_FOR_2_SEC: Picoseconds = 2 * WEIGHT_REF_TIME_PER_SECOND


# Convenience Constants
BLOCKS_PER_DAY: Blocks = DAY_TO_SECONDS / BLOCK_TIME
BLOCKS_PER_YEAR: Blocks = BLOCKS_PER_DAY * 365
BLOCKS_PER_MONTH: Blocks = BLOCKS_PER_YEAR / 12
BLOCKS_PER_WEEK: Blocks = BLOCKS_PER_DAY * 7

# Vesting Version 1
# Vested at Launch
# ALLOCATED_TESTNETS: float = 0.0525
# ALLOCATED_FOUNDATION: float = 0.15
# ALLOCATED_SUBSPACE_LABS: float = 0.07
# ALLOCATED_SSL_PRIV_SALE: float = 0.019
# ALLOCATED_VEST_AT_LAUNCH = ALLOCATED_TESTNETS + ALLOCATED_FOUNDATION + ALLOCATED_SUBSPACE_LABS + ALLOCATED_SSL_PRIV_SALE

# Standard Vesting
# ALLOCATED_INVESTORS: float = 0.2153
# ALLOCATED_FOUNDERS: float = 0.02
# ALLOCATED_TEAM: float = 0.05
# ALLOCATED_ADVISORS: float = 0.015
# ALLOCATED_VENDORS: float = 0.02
# ALLOCATED_AMBASSADORS: float = 0.01
# ALLOCATED_VEST_STANDARD: float = ALLOCATED_INVESTORS + ALLOCATED_FOUNDERS + ALLOCATED_TEAM + ALLOCATED_ADVISORS + ALLOCATED_VENDORS + ALLOCATED_AMBASSADORS

# Farmers Allocation
# ALLOCATED_FARMERS: float = 0.3782

# assert (ALLOCATED_VEST_AT_LAUNCH + ALLOCATED_VEST_STANDARD + ALLOCATED_FARMERS) == pt.approx(1.0, abs=1e-4), f"{(ALLOCATED_VEST_AT_LAUNCH + ALLOCATED_VEST_STANDARD + ALLOCATED_FARMERS)} != 1.0"

# Vesting Version 2
# Vested at Launch
# ALLOCATED_TESTNETS: float = 0.05
# ALLOCATED_FOUNDATION: float = 0.15
# ALLOCATED_HUMAIC_LABS: float = 0.07
# ALLOCATED_VEST_AT_LAUNCH = ALLOCATED_TESTNETS + ALLOCATED_FOUNDATION + ALLOCATED_HUMAIC_LABS

# Standard Vesting
# ALLOCATED_PROTOCOL_SALES: float = 0.235
# ALLOCATED_FOUNDERS: float = 0.02
# ALLOCATED_TEAM: float = 0.065
# ALLOCATED_PARTNERS: float = 0.02
# ALLOCATED_AMBASSADORS: float = 0.01
# ALLOCATED_VEST_STANDARD: float = ALLOCATED_PROTOCOL_SALES + ALLOCATED_FOUNDERS + ALLOCATED_TEAM + ALLOCATED_PARTNERS + ALLOCATED_AMBASSADORS

# Farmers Allocation
# ALLOCATED_COMMUNITY_REWARDS: float = 0.38

# assert (ALLOCATED_VEST_AT_LAUNCH + ALLOCATED_VEST_STANDARD + ALLOCATED_COMMUNITY_REWARDS) == pt.approx(1.0, abs=1e-4), f"{(ALLOCATED_VEST_AT_LAUNCH + ALLOCATED_VEST_STANDARD + ALLOCATED_COMMUNITY_REWARDS)} != 1.0"
